<p>This library provides constant and functions for various $^3$He properties.
Code can be found in <a href="https://github.com/slazav/he3lib">https://github.com/slazav/he3lib</a>


<h3>Supported interfaces</h3>

<p>The library can be used with different programming languages and via a
command-line interface. Example programs and scripts can be found in the
<tt>examples/</tt> folder.

<p>Old documentation (last updated 2016):
<a href="http://slazav.github.io/he3lib/index_2016.htm">
http://slazav.github.io/he3lib/index_2016.htm</a>

<ul>
<li><b>Fortran-77.</b>
You should use <tt>he3.fh</tt> include file and <tt>libhe3</tt> library for
Fortran-77 programs. All functions and arguments are <tt>real*8</tt>.
Use <tt>-fno-range-check</tt> compiler flag to allow <tt>NaN</tt> values.

<li><b>Fortran-90.</b> Usage of the library in Fortran-90 programs is
similar to that in Fortran-77, but you should use <tt>he3.f90h</tt> include
file.

<li><b>C.</b> You should use <tt>he3.h</tt> include file and <tt>libhe3</tt>
library in C programs. Lowercase names with underscore should be used
(like <tt>he3_pf_</tt>). Type of arguments is always <tt>double*</tt>,
type of returned value is <tt>double</tt>.

<li><b>Matlab, Octave.</b> <tt>mex</tt> files are located in the
<tt>matlab</tt> folder. Lowercase names should be used. In function
arguments you can mix numbers with arrays or matrices of the same size.
For example the command "<tt>fB = he3_nu_b(0:0.1:1, 0);</tt>" will give
you Leggett frequency vs temperature at zero pressure.
To build <tt>mex</tt> files you should run <tt>make octave</tt>, <tt>make
matlab</tt> or <tt>make matlab64</tt>. Note, that fixed rpath is used
for the library.

<li><b>Python</b>. There is Python interface for the library, thanks to L.Levitin.
See in <tt>python</tt> folder.

<li><b>Command line.</b>You can use all the functions via a
command-line program <tt>he3</tt>. To get a list of all functions run
the program without arguments. To get information about specific
function, run the program with the function name as an argument. You can
use matlab-style vectors "value1:step:value2" to get a table of values
(if step is missing then 20 points will be printed): the command "<tt>he3
he3_nu_b 0.1:0.1:1 0</tt>" will give you Leggett frequency vs
temperature at zero pressure.

<li><b>Web interface.</b> There is a simple web-server which runs
the <tt>he3</tt> command-line program. For example try the following link
to get s-wave BCS gap $\Delta_\mbox{bcs}/T_c$ as a function of $T/T_c$:
<br><a href="http://slazav.xyz/cgi/he3?he3_bcsgap 0:0.05:1">
http://slazav.xyz/cgi/he3?he3_bcsgap 0:0.05:1</a>
</ul>

<h3>Complex functions</h3>

<p>There are a few functions in the library with complex return value
(<tt>he3_lancwire_*</tt>, <tt>math_stokes</tt>). This interface is
experimental, you can always use separate functions for real/imag
component, in this case you will call the code twice. Support for complex
functions in the library:
<ul>
<li> [+] C/Fortran interfaces just return {double r,i} structure.
<li> [+] Command line interface prints two values.
<li> [+] Octave returns complex numbers.
<li> [-] Matlab does not support it. It should be easy to implement this, but I do not have Matlab at the moment.
<li> [-] Python binding does not support it.
</ul>

<p>Example with command line interface:
<pre><tt>
$ he3 he3_lancwire_n 0.011 0 16.5 124 1700
1.687029e+03 2.546024e+01
$ he3 he3_lancwire_n_f 0.011 0 16.5 124 1700
1.687029e+03
$ he3 he3_lancwire_n_w 0.011 0 16.5 124 1700
2.546024e+01
</tt></pre>


<h3>Acknowledgements</h3>

This library have been done in collaboration with my colleagues in Low
temperature laboratory (Aalto University, Finland): P.Heikkinen, S.Autti,
V.Eltsov, M.Krusius and G.Volovik. Other $^3$He programs and libraries
have been used in the work: programs by V.Dmitriev (Kapitza institute,
Moscow), S.Autti, $^3$He-B texture library by J.Kopu, <a
href="http://ltl.tkk.fi/research/theory/qc/bcsgap.html">programs</a> by
E.Thuneberg, Lancaster programs for vibrating wire calibrations.
