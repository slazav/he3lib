#!/usr/bin/perl
use strict;
use warnings;
use Data::Dumper;

my @files = split /\s+/,
 'he3_const.f he3_phase.f he3_fermi.f he3_gap.f ' .
 'he3_dipole.f he3_grad.f he3_text.f ' .
 'he3_transp_n.f he3_transp_b.f ' .
 'he3_b2.f he3_other.f he3_normal.f he3_a.f he3_polar.f ' .
 'he3_rota.f he3_bspec.f he3_math.f he4.f he34.f he3_wire_orig.f'
;

my $code_prefix="https://raw.githubusercontent.com/slazav/he3lib/master/functions/";

# quote text for putting it into c-string
sub quote_c_str($){
  my $arg=shift || '';
  $arg =~ s/\"/\\\"/g;
  $arg =~ s/\\/\\\\/g;
  return $arg;
}

# quote text for putting it into c-comment
sub quote_c_comm($){
  my $arg=shift || '';
  $arg =~ s|\*/|\*|g;
  return $arg;
}


#############################################
# Read source files, extract function profiles,
# data blocks, comments, headers.
#
# Special marks:
#   !>    -- comments for a function
#   !C>   -- constant
#   !F>   -- double function
#   !FC>  -- complex function
#   !H>   -- small header
#   !HH>  -- big header (one per file)
my @data;
my @dblocks;
foreach my $fname (@files) {
  open F, "functions/$fname" or die "can't open $fname: $!";
  my $mode = 0;
  my $text = '';
  push @data, {
    type=>'file',
    fname=>$fname
  };
  foreach (<F>){

    # lines with text, !> comments
    if (/^\!>\s*(.*)/){
      $text .= "\n" if $text;
      $text .= $1;
      next;
    }

    # functions
    elsif (/^\s*function\s+(\w+)\(([^\)]+)\)\s*\!F(C?)>\s*(.*)/){
      my $name = $1;
      my $args = $2;
      my $cmpl = $3? 1:0;
      my $title = $4;
      if (!$title){
        my $i = index($text, "\n");
        if ($i>0){
          $title = substr($text, 0, $i);
          $text  = substr($text, $i);
        }
        else {
          $title = $text;
          $text = '';
        }
      }
      $args =~ s/\s+//g;
      my $narg = scalar(split ',', $args);
      push @data, {
        type=> $cmpl? 'CFUNC':'DFUNC',
        cmpl=>$cmpl,
        name=>$name,
        args=>$args,
        narg=>$narg,
        title=>$title,
        text=>$text,
        fname=>$fname
      };
    }

    # constants
    elsif (/^[ .]+(\w+)\s*\/([0-9D.+-]+)\/,?\s*!C>\s*(.*)/){
      my $name = $1;
      my $value = $2;
      my $title = $3;
      $value =~ s/D0$//i;
      $value =~ s/D0+/D/i;
      $value =~ s/D/e/i;
      push @data, {
        type=>'CONST',
        name=>$name,
        args=>'',
        narg=>0,
        value=>$value,
        title=>$title,
        text=>$text,
        fname=>$fname
      };
    }

    # headers
    elsif (/^\!(HH?)>\s*(.*)/){
      push @data, {
        type=>$1,
        text=>$2,
        fname=>$fname
      };
    }

    # data blocks
    elsif (/^\s*block\s*data\s+(\w+)/){
      push @dblocks, $1;
    }

    elsif ($text) {
      push @data, {
        type=>'text',
        text=>$text
      };
    }

    $text = '';
  }
  close F;
}


#############################################
# write header files

open(OUT_C,   '> he3.h')    or die 'Can not open he3.h: $!';
open(OUT_F77, '> he3.fh')   or die 'Can not open he3.fh: $!';
open(OUT_F90, '> he3.f90h') or die 'Can not open he3.f90h: $!';
open(OUT_TAB, '> he3tab.h') or die 'Can not open he3tab.h: $!';

my $head = "This file is generated by $0 script. Don't modify it!";
print OUT_C   "/* $head */\n\n";
print OUT_TAB "/* $head */\n\n";
print OUT_F77 "! $head\n\n";
print OUT_F90 "! $head\n\n";

print OUT_C   "#ifndef HE3_H\n#define HE3_H\n";
print OUT_C   "typedef struct { double r,i; } complex;\n";

print OUT_TAB qq|
#include "he3.h"

typedef double (*dfun1_t)(double*);
typedef double (*dfun2_t)(double*, double*);
typedef double (*dfun3_t)(double*, double*, double*);
typedef double (*dfun4_t)(double*, double*, double*, double*);
typedef double (*dfun5_t)(double*, double*, double*, double*, double*);
typedef double (*dfun6_t)(double*, double*, double*, double*, double*, double*);
typedef double (*dfun7_t)(double*, double*, double*, double*, double*, double*, double*);
typedef double (*dfun8_t)(double*, double*, double*, double*, double*, double*, double*, double*);

typedef complex (*cfun1_t)(double*);
typedef complex (*cfun2_t)(double*, double*);
typedef complex (*cfun3_t)(double*, double*, double*);
typedef complex (*cfun4_t)(double*, double*, double*, double*);
typedef complex (*cfun5_t)(double*, double*, double*, double*, double*);
typedef complex (*cfun6_t)(double*, double*, double*, double*, double*, double*);
typedef complex (*cfun7_t)(double*, double*, double*, double*, double*, double*, double*);
typedef complex (*cfun8_t)(double*, double*, double*, double*, double*, double*, double*, double*);

typedef enum { CONST, DFUNC, CFUNC} ftype_t;

struct tab_t {
  const char * name;
  const void * func;
  const int    narg;
  const ftype_t type;
  const char * args;
  const char * comm;
};
struct tab_t func_tab[] = {
|;

# This is the only difference between F77 and F90 header files.
# We need this to avoid possible linker problems
# See http://gcc.gnu.org/onlinedocs/gcc-3.4.6/g77/Block-Data-and-Libraries.html#Block-Data-and-Libraries
print OUT_F90 "external $_\n" foreach (@dblocks);

# NaN definition for fortran
my $fnan =qq{
!NaN parameter. -fno-range-check should be used in compilation!
      real*8 NaN
      parameter (NaN = 0D0/0D0)
};
print OUT_F77 $fnan;
print OUT_F90 $fnan;

my $cmn = "\n! Common blocks for constants\n";

foreach my $d (@data) {

  if ($d->{type} eq 'file') {
    print OUT_C   "\n/", '*'x50, "/\n/* Source file: $d->{fname} */\n";
    print OUT_F77 "\n!", '-'x50, "\n! Source file: $d->{fname}\n";
    print OUT_F90 "\n!", '-'x50, "\n! Source file: $d->{fname}\n";
  }

  if ($d->{type} eq 'H') {
    printf OUT_C  "\n/* %s */\n", quote_c_comm($d->{text});
    print OUT_F77 "\n! $d->{text}\n";
    print OUT_F90 "\n! $d->{text}\n";
  }
  if ($d->{type} eq 'HH') {
    printf OUT_C  "/* %s */\n", quote_c_comm($d->{text});
    print OUT_F77 "! $d->{text}\n";
    print OUT_F90 "! $d->{text}\n";
  }

  if ($d->{type} eq 'DFUNC') {
    my @args = split(/\s*,\s*/, $d->{args});
    my $cargs .= 'double *' . join(', double *', @args);
    print OUT_C   "double $d->{name}_($cargs);\n";
    print OUT_F77 "      real*8 $d->{name}\n";
    print OUT_F90 "      real*8 $d->{name}\n";
  }
  if ($d->{type} eq 'CFUNC') {
    my @args = split(/\s*,\s*/, $d->{args});
    my $cargs .= 'double *' . join(', double *', @args);
    print OUT_C   "void $d->{name}_(complex * ret, $cargs);\n";
    print OUT_F77 "      complex*16 $d->{name}\n";
    print OUT_F90 "      complex*16 $d->{name}\n";
  }
  if ($d->{type} eq 'CONST') {
    printf OUT_C   "extern double $d->{name}_;\n";
    print  OUT_F77 "      real*8 $d->{name}\n";
    print  OUT_F90 "      real*8 $d->{name}\n";
    $cmn.= sprintf "      common %17s $d->{name}\n", "/$d->{name}/";
  }

  if ($d->{type} eq 'CONST' || $d->{type} eq 'DFUNC' || $d->{type} eq 'CFUNC') {
    # create octave/matlab wrapper functions
    open(OCT_F, "> m/$d->{name}.m") or die "can't open m/$d->{name}.m: $!";
    print OCT_F "function v=$d->{name}(varargin)\n";
    print OCT_F "  # $d->{name}($d->{args}) -- $d->{title}\n";
    print OCT_F "  v=he3lib(\"$d->{name}\", varargin{:}); end";
    close(OCT_F);

    # TAB-file
    my $tcomm = $d->{title} || '';
    $tcomm =~ s/\"/\\\"/g;
    printf OUT_TAB "{%-22s %-36s, %d, %s, \"%s\", \"%s\"},\n",
      "\"$d->{name}\",", "(const void*)&$d->{name}_",
      $d->{narg}, $d->{type}, $d->{args}, quote_c_str($d->{title});
  }
}

print OUT_F77 $cmn, "\n";
print OUT_F90 $cmn, "\n";

print OUT_TAB "{NULL,NULL,0,CONST,NULL,NULL}};\n";
print OUT_C "#endif\n";
close OUT_F77;
close OUT_F90;
close OUT_TAB;

#############################################
# write documentation

open(OUT_HTM, '> docs/index.htm') or die 'Can not open index.htm: $!';
print OUT_HTM qq*<html>
<head>
<script type="text/javascript"
  async src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_CHTML"></script>
<script type="text/x-mathjax-config">MathJax.Hub.Config({
   tex2jax: {inlineMath: [['\$','\$']]},
   "HTML-CSS": {scale: 40}
   });
</script>
<link rel="stylesheet" type="text/css" href="he3.css">
<meta charset="utf-8">
</head>
<body>
<h1>He\$^3\$ library</h1>
*;

# table of contents
print OUT_HTM "<hr><ul>\n";
print OUT_HTM "<li><a href='#hh0'>About the library</a>\n";
my $ihh=0; # HH header counter;
foreach my $d (@data) {
  next unless ($d->{type} eq 'HH');
  $ihh++;
  print OUT_HTM "<li><a href='#hh$ihh'>$d->{text}</a>\n";
}
print OUT_HTM "</ul>\n";

# docs/about.txt
print OUT_HTM "<hr><a name='hh0'></a><h2>About the library</h2>\n";
open F, "docs/about.txt" or die "can't open docs/about.txt: $!";
print OUT_HTM foreach(<F>);
close F;

$ihh=0;
foreach my $d (@data) {
  ## file header
  if ($d->{type} eq 'HH'){
      $ihh++;
      print OUT_HTM "<hr><a name='hh$ihh'></a><h2>$d->{text}\n";
      print OUT_HTM "<a href=\"$code_prefix/$d->{fname}\">[$d->{fname}]</a>\n";
      print OUT_HTM "</h2>\n";
  }

  ## header
  elsif ($d->{type} eq 'H'){
      print OUT_HTM "<h3>$d->{text}</h3>\n";
  }

  ## text
  elsif ($d->{type} eq 'text'){
      print OUT_HTM "<p>$d->{text}</p>\n";
  }

  ## double function
  elsif ($d->{type} eq 'DFUNC'){
    print OUT_HTM "<p><tt>$d->{name}($d->{args})</tt> -- $d->{title}\n";
    print OUT_HTM "<br>$d->{text}\n";
    print OUT_HTM "\n";
  }

  ## complex function
  elsif ($d->{type} eq 'CFUNC'){
    print OUT_HTM "<p><tt>$d->{name}($d->{args})</tt> -- $d->{title} <b>(complex)</b>\n";
    print OUT_HTM "<br>$d->{text}\n";
    print OUT_HTM "\n";
  }

  ## constant
  elsif ($d->{type} eq 'CONST'){
    print OUT_HTM "<p><tt>$d->{name} = $d->{value}</tt> -- $d->{title}\n";
  }
}

print OUT_HTM qq*
</body></html>
*;

